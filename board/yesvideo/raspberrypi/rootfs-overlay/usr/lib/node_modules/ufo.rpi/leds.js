var Promise = require('bluebird');
var gpio = Promise.promisifyAll(require('rpi-gpio'));
var piblaster = require('pi-blaster.js');
var pins = require('./pins');

var LEDS_AUTO_OFF_MS = 5 * 60 * 1000;
var ledsAutoOffWatchdog;

function reset() {
    if (ledsAutoOffWatchdog != null) {
        clearTimeout(ledsAutoOffWatchdog);
        ledsAutoOffWatchdog = null;
    }

    pins.leds.forEach(function(pin) {
        gpio.setupAsync(pin, gpio.DIR_OUT)
            .then(function() {
                gpio.write(pin, 0);
            });
    });
    gpio.setupAsync(pins.dimming, gpio.DIR_OUT)
        .then(function() {
            dim(0);
        });
}

function dim(pct) {
    pct = Math.min(100, Math.max(0, pct));
    pct /= 100;
    piblaster.setPwm(pins.dimmingBcm, pct);
};

function set(id, onOff, cb) {
    if (ledsAutoOffWatchdog != null) {
        clearTimeout(ledsAutoOffWatchdog);
        ledsAutoOffWatchdog = null;
    }

    var ix = (id - 1) % pins.leds.length;

    var allOff = pins.leds.map(function (pin, i) {
        return (i != ix) && gpio.writeAsync(pin, false);
    });
    Promise.all(allOff)
        .then(function() { gpio.writeAsync(pins.leds[ix], onOff) })
        .then(cb)
        .catch(cb);

    if (onOff) {
        ledsAutoOffWatchdog = setTimeout(allOff, LEDS_AUTO_OFF_MS);
    }
}

function on(id, cb) {
    set(id, true, cb);
}

function off(id, cb) {
    set(id, false, cb);
}

function allOff(cb) {
    for (i = 1; i <= pins.leds.length; i++) {
        off(i, i == pins.leds.length ? cb : null)
    }
}

module.exports = {
    reset: reset,
    dim: dim,
    set: set,
    on: on,
    off: off,
    allOff: allOff
};