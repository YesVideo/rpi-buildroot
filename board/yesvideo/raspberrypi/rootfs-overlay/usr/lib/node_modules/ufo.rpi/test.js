var gpio = require('rpi-gpio');
var piblaster = require('pi-blaster.js');
var allPins = require('./pins');
var pins = allPins.test;
var interrupts = require('./interrupts');
var leds = require('./leds');
var servo = require('./servo');
var laser = require('./laser');

function reset() {
    interrupts.watch(pins.testMode, setTestMode);
    interrupts.watch(pins.nextLed, testNextLed);
    interrupts.watch(pins.dimLed, testDimLed);
    interrupts.watch(pins.laser, testLaser);
    interrupts.watch(pins.servo, testServo);
    interrupts.watch(pins.reset, testReset);

    gpio.setup(pins.ready, gpio.DIR_OUT, function() {
        gpio.write(pins.ready, true);
    });


    currentTestLed = -1;
}

var testMode = false;

function setTestMode(val) {
    testMode = val;
}

var currentTestLed = -1;

function testNextLed(val) {
    if (testMode && val) {
        currentTestLed = (currentTestLed + 1) % allPins.leds.length;
        leds.on(currentTestLed + 1);
    }
}

function testDimLed(val) {
    if (testMode) {
        leds.dim(val ? 20 : 100);
    }
}

function testLaser(val) {
    if (testMode) {
        laser.set(val);
    }
}

function testServo(val) {
    if (testMode) {
        servo.set(val ? 180 : 0);
    }
}

function testReset(val) {
    if (testMode && val) {
        leds.reset();
        servo.reset();
        laser.reset();
    }
}

module.exports = {
    reset: reset
};