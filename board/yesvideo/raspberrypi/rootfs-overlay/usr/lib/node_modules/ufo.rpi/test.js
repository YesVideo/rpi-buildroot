var gpio = require('rpi-gpio');
var piblaster = require('pi-blaster.js');
var allPins = require('./pins');
var pins = allPins.test;
var interrupts = require('./interrupts');
var leds = require('./leds');
var servo = require('./servo');
var laser = require('./laser');

interrupts.reset();

var ledTestDelay = 500;
var laserTestDelay = 5000;
var servoTestDelay = 2000;
function ledTest(n, pct) {
    return function() {
        leds.dim(pct);
        leds.on(n);
        console.log("LED " + n + " " + pct + "%");
    }
}
var tests = [
    [ledTest(1, 100), ledTestDelay],
    [ledTest(2, 100), ledTestDelay],
    [ledTest(3, 100), ledTestDelay],
    [ledTest(4, 100), ledTestDelay],
    [ledTest(5, 100), ledTestDelay],
    [ledTest(6, 100), ledTestDelay],
    [ledTest(7, 100), ledTestDelay],
    [ledTest(8, 100), ledTestDelay],
    [ledTest(1, 50), ledTestDelay],
    [ledTest(2, 50), ledTestDelay],
    [ledTest(3, 50), ledTestDelay],
    [ledTest(4, 50), ledTestDelay],
    [ledTest(5, 50), ledTestDelay],
    [ledTest(6, 50), ledTestDelay],
    [ledTest(7, 50), ledTestDelay],
    [ledTest(8, 50), ledTestDelay],
    [ledTest(1, 20), ledTestDelay],
    [ledTest(2, 20), ledTestDelay],
    [ledTest(3, 20), ledTestDelay],
    [ledTest(4, 20), ledTestDelay],
    [ledTest(5, 20), ledTestDelay],
    [ledTest(6, 20), ledTestDelay],
    [ledTest(7, 20), ledTestDelay],
    [ledTest(8, 20), ledTestDelay],
    [function() {leds.allOff(); console.log("leds off");}, 0],
    [function() {laser.on(); console.log("laser on");}, laserTestDelay],
    [function() {laser.off(); console.log("laser off");}, 0],
    [function() {servo.set(180); console.log("servo @180");}, servoTestDelay],
    [function() {servo.set(90); console.log("servo @90");}, servoTestDelay],
    [function() {servo.set(0); console.log("servo @0");}, servoTestDelay],
];

var testIx = 0;
var testTimer = null;

function reset() {
    interrupts.watch(pins.reset, testAll);
}

function testAll(val) {
    if (!val) {
        function step() {
            var test = tests[testIx % tests.length];
            test[0]();
            testIx++;
            testTimer = setTimeout(step, test[1]);
        }
        step();
    }
    else {
        clearTimeout(testTimer);
        testIx = 0;
        leds.reset();
        servo.reset();
        laser.reset();
    }
}

module.exports = {
    reset: reset
};