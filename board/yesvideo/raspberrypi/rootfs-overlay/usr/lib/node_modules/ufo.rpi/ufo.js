var gpio = require('rpi-gpio');
var piblaster = require('pi-blaster.js');
var getmac = require('getmac').getMac;
var exec = require('child_process').exec;


var pins = require('./pins');
var leds = require('./leds');
var servo = require('./servo');
var laser = require('./laser');

var StorageInfo = require('./storageInfo');
var storageInfo = StorageInfo.storageInfo;
var MOUNTPT = StorageInfo.MOUNTPT;

function reset() {
    leds.reset();
    servo.reset();
    laser.reset();
}

reset();

var express = require('express');
var multer = require('multer');
var mkdirp = require('mkdir-recursive').mkdir;
var path = require('path');
path.isAbsolute = require('path-is-absolute');

var uploadsRoot = MOUNTPT + '/';

var storage = multer.diskStorage({
    destination: function (req, file, cb) {
        var dir = uploadsRoot + (req.body.dir || '');
        mkdirp(dir, function(err) {
            cb(err, dir);
        });
    },
    filename: function (req, file, cb) {
        cb(null, req.body.filename || file.originalname);
    }
});
 
var upload = multer({ storage: storage })

var app = express();

function sendSuccess(res, msg) {
    res.send({data: msg});
}

function sendError(res, msg, status) {
    var detail = (typeof msg == 'string') ? msg : JSON.stringify(msg);
    res.status(status || 400).send({errors: [{detail: detail}]});
}

app.post('/upload', upload.single('file'), function (req, res, next) {
    console.log("Wrote " + req.file.path + "\t" + Math.round(req.file.size / 100.0) + "K");
    sendSuccess(res, "Saved");
})

app.post('/unmountStorage', function(req, res) {
    // unmount all devices at the mountpoint
    var cmd = "MOUNT=" + MOUNTPT + "; i=`df |grep -c $MOUNT`; while [ $i -gt 0 ]; do umount $MOUNT; i=`expr $i - 1`; done";
    exec(cmd, function(err, stdout, stderr) {
        if (stderr) { // don't test for exit status, since that's the last value of $i in our while loop
            sendError(res, stderr, 500);
        }
        else {
            sendSuccess(res, "ok");
        }
    });
});

app.get('/storageInfo', function(req, res) {
    storageInfo(function(err, inf) {
        if (err) {
            sendError(res, String(err), 500);
        }
        else {
            sendSuccess(res, inf);
        }
    });
});

app.get('/id', function(req, res) {
    getmac(function(err, mac){
        if (err) {
            sendError(res, String(err), 500);
        }
        else {
            sendSuccess(res, {id: mac});
        }
    })    
});

app.post('/reset', function(req, res){
    reset();
    sendSuccess(res, 'UFO reset');
});

app.post('/leds/dim/:val(\\d+)', function(req, res) {
    var val = req.params.val;
    val = Math.min(100, Math.max(0, val));

    leds.dim(val);
    sendSuccess(res, 'led dim => ' + val + '%');
});

app.post('/leds/0', function(req, res) {
    leds.allOff();
    sendSuccess(res, 'leds off');
});

app.post(/\/leds\/([1-8])\/([01](.\d+)?)/, function(req, res) {
    var id = req.params[0];
    var val = parseFloat(req.params[1]);
    var onOff = val > 0;
    var msg = onOff ? 'on' : 'off';
    
    val = Math.floor(val * 100);
    leds.dim(val);
    
    if (val > 0 && val < 1) {
        msg = String(val) + '%';
    }

    leds.set(id, onOff, function() {
        sendSuccess(res, 'led ' + id + ' ' + msg);
    });
});

app.post('/servo/:deg(\\d+)', function(req, res) {
    var deg = parseInt(req.params.deg);

    if (deg < 0 || deg > 180) {
        sendError(res, "Invalid degrees: " + req.params.deg);
    }
    else {
        servo.set(deg, function() {
            sendSuccess(res, 'servo => ' + deg + ' deg');
        });
    }
});

app.post('/laser/:val([01])', function(req, res) {
    var val = req.params.val == '1';
    
    laser.set(val, function() {
        sendSuccess(res, 'laser ' + (val ? 'on' : 'off'));
    });
});

app.get('/*', function(req, res){
    sendSuccess(res, 'YesVideo UFO');
});

var port = 80;
console.log("Listening on port " + port);
app.listen(port);
