var gpio = require('rpi-gpio');
var piblaster = require('pi-blaster.js');

var pins = require('./pins');
var leds = require('./leds');
var servo = require('./servo');
var laser = require('./laser');

function reset() {
    leds.reset();
    servo.reset();
    laser.reset();
}

reset();

var app = require('express')();
var server = require('http').Server(app);

server.listen(80);


function sendSuccess(res, msg) {
    res.send({data: msg});
}

function sendError(res, msg, status) {
    res.status(status || 400).send({errors: [{detail: msg}]});
}

app.post('/reset', function(req, res){
    reset();
    sendSuccess(res, 'UFO reset');
});

app.post('/leds/dim/:val(\\d+)', function(req, res) {
    var val = req.params.val;
    val = Math.min(100, Math.max(0, val));

    leds.dim(val);
    sendSuccess(res, 'led dim => ' + val + '%');
});

app.post('/leds/0', function(req, res) {
    leds.allOff();
    sendSuccess(res, 'leds off');
});

app.post(/\/leds\/([1-8])\/([01](.\d+)?)/, function(req, res) {
    var id = req.params[0];
    var val = parseFloat(req.params[1]);
    var onOff = val > 0;
    var msg = onOff ? 'on' : 'off';
    
    val = Math.floor(val * 100);
    leds.dim(val);
    
    if (val > 0 && val < 1) {
        msg = String(val) + '%';
    }

    leds.set(id, onOff, function() {
        sendSuccess(res, 'led ' + id + ' ' + msg);
    });
});

app.post('/servo/:deg(\\d+)', function(req, res) {
    var deg = parseInt(req.params.deg);

    if (deg < 0 || deg > 180) {
        sendError(res, "Invalid degrees: " + req.params.deg);
    }
    else {
        servo.set(deg, function() {
            sendSuccess(res, 'servo => ' + deg + ' deg');
        });
    }
});

app.post('/laser/:val([01])', function(req, res) {
    var val = req.params.val == '1';
    
    laser.set(val, function() {
        sendSuccess(res, 'laser ' + (val ? 'on' : 'off'));
    });
});

app.get('/*', function(req, res){
    sendSuccess(res, 'YesVideo UFO');
});
